DROP DATABASE IF EXISTS envios_paquetes;
-- Crear la base de datos
CREATE DATABASE envios_paquetes;
USE envios_paquetes;

-- Crear la tabla Sucursal
CREATE TABLE SUCURSAL (
    COD_SUCURSAL INT NOT NULL PRIMARY KEY,
    DIRECCION VARCHAR(100),
    TELEFONOS VARCHAR(20)
);

-- Crear la tabla Empleado
CREATE TABLE EMPLEADO (
    COD_EMPLEADO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    COD_SUCURSAL INT,
    NOMBRE VARCHAR(100) DEFAULT 'EMPLEADO SIN NOMBRE',
    APELLIDO VARCHAR(100),
    DOMICILIO VARCHAR(100),
    TELEFONOS VARCHAR(20)
);

-- Crear la tabla Automovil
CREATE TABLE AUTOMOVIL (
    COD_AUTOMOVIL INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    COD_SUCURSAL INT,
    COD_EMPLEADO INT,
    PATENTE VARCHAR(20),
    MODELO VARCHAR(100)    
);

-- Crear la tabla Cliente
CREATE TABLE CLIENTE (
    COD_CLIENTE INT NOT NULL PRIMARY KEY,
    NOMBRE VARCHAR(100),
    APELLIDO VARCHAR(100),
    DOMICILIO VARCHAR(100),
    TELEFONOS VARCHAR(20)
);

-- Crear la tabla Paquete
CREATE TABLE PAQUETE (
    COD_PAQUETE INT NOT NULL PRIMARY KEY,
    COD_CLIENTE INT,
    COD_EMPLEADO INT,
    FECHA_ENVIO DATE,
    ESTADO BOOLEAN
  );

-- Crear la tabla Producto
CREATE TABLE PRODUCTO (
    COD_PRODUCTO INT NOT NULL PRIMARY KEY,
    COD_PAQUETE INT,
    NOMBRE VARCHAR(100),
    DESCRIPCION VARCHAR(255),
    PESO DECIMAL(10 , 2 ),
    PRECIO DECIMAL(10 , 2 )
   );
   
-- Crear la tabla para almacenar los cambios de estado de los paquetes
CREATE TABLE LOG_CAMBIOS_PAQUETE (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    COD_PAQUETE INT,
    FECHA_CAMBIO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTADO_ANTERIOR BOOLEAN,
    ESTADO_ACTUAL BOOLEAN
);


ALTER TABLE PRODUCTO
	ADD CONSTRAINT FK_PRODUCTO_PAQUETE
    FOREIGN KEY (COD_PAQUETE) REFERENCES PAQUETE (COD_PAQUETE);

-- FOREIGN KEYS DEFINITION
ALTER TABLE EMPLEADO
	ADD CONSTRAINT FK_EMP_SUCURSAL
    FOREIGN KEY (COD_SUCURSAL) REFERENCES SUCURSAL(COD_SUCURSAL); 
    
ALTER TABLE AUTOMOVIL
	ADD CONSTRAINT FK_AUTO_SUCURSAL
	FOREIGN KEY (COD_SUCURSAL) REFERENCES SUCURSAL (cod_sucursal);
    
ALTER TABLE AUTOMOVIL
	ADD CONSTRAINT FK_AUTO_EMPLEADO
	FOREIGN KEY (COD_EMPLEADO) REFERENCES EMPLEADO (COD_EMPLEADO);
    
ALTER TABLE PAQUETE
	ADD CONSTRAINT FK_PAQUETE_CLIENTE
	FOREIGN KEY (COD_CLIENTE) REFERENCES CLIENTE (COD_CLIENTE);
    
ALTER TABLE PAQUETE
	ADD CONSTRAINT FK_PAQUETE_EMPLEADO
	FOREIGN KEY (COD_EMPLEADO) REFERENCES EMPLEADO (COD_EMPLEADO);
    
INSERT INTO SUCURSAL (COD_SUCURSAL, DIRECCION, TELEFONOS) VALUES
(1, 'Calle 123, Ciudad X', '123456789'),
(2, 'Avenida Principal, Ciudad Y', '987654321'),
(3, 'Calle Central, Ciudad Z', '111222333');

INSERT INTO EMPLEADO (COD_SUCURSAL, NOMBRE, APELLIDO, DOMICILIO, TELEFONOS) VALUES
(1, 'Juan', 'Perez', 'Calle 456, Ciudad X', '987654321'),
(1, 'Maria', 'Gomez', 'Calle 789, Ciudad X', '123456789'),
(2, 'Pedro', 'Martinez', 'Avenida Secundaria, Ciudad Y', '654987321'),
(2, 'Laura', 'Lopez', 'Calle 567, Ciudad Y', '789123456'),
(3, 'Ana', 'Garcia', 'Calle 890, Ciudad Z', '456789123');

INSERT INTO AUTOMOVIL (COD_SUCURSAL, PATENTE, MODELO) VALUES
(1, 'ABC123', 'Toyota Corolla'),
(1, 'XYZ789', 'Ford Fiesta'),
(2, 'DEF456', 'Chevrolet Aveo'),
(3, 'GHI789', 'Nissan Sentra');

INSERT INTO CLIENTE (COD_CLIENTE, NOMBRE, APELLIDO, DOMICILIO, TELEFONOS) VALUES
(1, 'Carlos', 'Lopez', 'Calle Principal, Ciudad Z', '987654321'),
(2, 'Ana', 'Garcia', 'Avenida Central, Ciudad W', '123456789'),
(3, 'Roberto', 'Martinez', 'Avenida Sur, Ciudad X', '789456123');

INSERT INTO PAQUETE (COD_PAQUETE, COD_CLIENTE, COD_EMPLEADO, FECHA_ENVIO, ESTADO) VALUES
(1, 1, 1, '2024-03-01', 1),
(2, 2, 2, '2024-03-02', 1),
(3, 3, 3, '2024-03-03', 1);

INSERT INTO PRODUCTO (COD_PRODUCTO, COD_PAQUETE, NOMBRE, DESCRIPCION, PESO, PRECIO) VALUES
(1, 1, 'Libro', 'Novela de ficción', 0.5, 20.99),
(2, 1, 'Camiseta', 'Talla M, color rojo', 0.3, 15.50),
(3, 2, 'Zapatos', 'Zapatos deportivos, talla 8', 0.7, 50.00),
(4, 3, 'Teléfono', 'Smartphone de última generación', 0.4, 600.00);


-- saber que empleados trabajan en cada sucursal
SELECT S.DIRECCION AS DIRECCION_SUCURSAL, E.NOMBRE AS NOMBRE_EMPLEADO, E.APELLIDO AS APELLIDO_EMPLEADO
FROM SUCURSAL S
INNER JOIN EMPLEADO E ON S.COD_SUCURSAL = E.COD_SUCURSAL
ORDER BY S.COD_SUCURSAL, E.COD_EMPLEADO;

-- saber que compro cada cliente
SELECT C.NOMBRE AS NOMBRE_CLIENTE, C.APELLIDO AS APELLIDO_CLIENTE, PR.NOMBRE AS NOMBRE_PRODUCTO, PR.DESCRIPCION, PR.PESO, PR.PRECIO
FROM CLIENTE C
INNER JOIN PAQUETE P ON C.COD_CLIENTE = P.COD_CLIENTE
INNER JOIN PRODUCTO PR ON P.COD_PAQUETE = PR.COD_PAQUETE
ORDER BY C.COD_CLIENTE, P.COD_PAQUETE, PR.COD_PRODUCTO;

-- saber el estado de la entrega, los datos del empleado y cliente
SELECT C.NOMBRE AS NOMBRE_CLIENTE, E.NOMBRE AS NOMBRE_EMPLEADO,
       CASE 
           WHEN PA.ESTADO = 1 THEN 'Entregado'
           ELSE 'No entregado'
       END AS ESTADO_ENTREGA
FROM EMPLEADO E
JOIN PAQUETE PA ON E.COD_EMPLEADO = PA.COD_EMPLEADO
JOIN CLIENTE C ON PA.COD_CLIENTE = C.COD_CLIENTE
WHERE E.COD_EMPLEADO = 1;

-- Vista: vista_paquetes_por_cliente
CREATE VIEW vista_paquetes_por_cliente AS
	SELECT C.COD_CLIENTE, C.NOMBRE, C.APELLIDO, P.COD_PAQUETE, P.FECHA_ENVIO, P.ESTADO, PR.NOMBRE AS PRODUCTO, PR.DESCRIPCION, PR.PESO, PR.PRECIO
	FROM CLIENTE C
	JOIN PAQUETE P ON C.COD_CLIENTE = P.COD_CLIENTE
	JOIN PRODUCTO PR ON P.COD_PAQUETE = PR.COD_PAQUETE;
    
SELECT * FROM vista_paquetes_por_cliente;

-- Vista: vista_empleados_por_sucursal
CREATE VIEW vista_empleados_por_sucursal AS
	SELECT S.COD_SUCURSAL, S.DIRECCION, E.COD_EMPLEADO, E.NOMBRE, E.APELLIDO, E.DOMICILIO, E.TELEFONOS
	FROM SUCURSAL S
	JOIN EMPLEADO E ON S.COD_SUCURSAL = E.COD_SUCURSAL;
    
SELECT * FROM vista_empleados_por_sucursal;

-- Vista: vista_envios_por_fecha
CREATE VIEW vista_envios_por_fecha AS
	SELECT P.COD_PAQUETE, P.FECHA_ENVIO, C.COD_CLIENTE, C.NOMBRE AS NOMBRE_CLIENTE, C.APELLIDO AS APELLIDO_CLIENTE, E.COD_EMPLEADO, E.NOMBRE AS NOMBRE_EMPLEADO, E.APELLIDO AS APELLIDO_EMPLEADO, PR.NOMBRE AS PRODUCTO, PR.DESCRIPCION, PR.PESO, PR.PRECIO
	FROM PAQUETE P
	JOIN CLIENTE C ON P.COD_CLIENTE = C.COD_CLIENTE
	JOIN EMPLEADO E ON P.COD_EMPLEADO = E.COD_EMPLEADO
	JOIN PRODUCTO PR ON P.COD_PAQUETE = PR.COD_PAQUETE;

SELECT * FROM vista_envios_por_fecha;
    


-- Función: calcular_total_envios_por_cliente
DELIMITER //

CREATE FUNCTION calcular_total_envios_por_cliente(cod_cliente INT) RETURNS INT
READS SQL DATA
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM PAQUETE WHERE COD_CLIENTE = cod_cliente;
    RETURN total;
END //

DELIMITER ;

SELECT calcular_total_envios_por_cliente(1) AS total_envios;

-- Función: obtener_productos_por_paquete
DELIMITER //
CREATE FUNCTION obtener_productos_por_paquete(cod_paquete INT) RETURNS VARCHAR(255)
READS SQL DATA
BEGIN
    DECLARE productos VARCHAR(255);
    SELECT GROUP_CONCAT(NOMBRE SEPARATOR ', ') INTO productos FROM PRODUCTO WHERE COD_PAQUETE = cod_paquete;
    RETURN productos;
END //
DELIMITER ;


SELECT obtener_productos_por_paquete(1) AS productos_del_paquete;

-- Función: calcular_peso_total_paquete
DELIMITER //

CREATE FUNCTION calcular_peso_total_paquete(cod_paquete INT) RETURNS VARCHAR(20)
READS SQL DATA
BEGIN
    DECLARE peso_total DECIMAL(10,2);
    DECLARE peso_total_str VARCHAR(20);
    SELECT SUM(PESO) INTO peso_total FROM PRODUCTO WHERE COD_PAQUETE = cod_paquete;
    SET peso_total_str = CONCAT(peso_total, ' KG');
    RETURN peso_total_str;
END //

DELIMITER ;

SELECT calcular_peso_total_paquete(2) AS peso_total_del_paquete;

DELIMITER //

-- Stored Procedure: sp_actualizar_estado_paquete
DELIMITER //
CREATE PROCEDURE sp_actualizar_estado_paquete(
    IN p_cod_paquete INT,
    IN p_estado BOOLEAN
)
BEGIN
    UPDATE PAQUETE SET ESTADO = p_estado WHERE COD_PAQUETE = p_cod_paquete;
END //
DELIMITER ;

CALL sp_actualizar_estado_paquete(1, FALSE);
SELECT * FROM PAQUETE WHERE COD_PAQUETE = 1;


-- Stored Procedure: sp_obtener_envios_por_fecha
DELIMITER //
CREATE PROCEDURE sp_obtener_envios_por_fecha(
    IN p_fecha_inicio DATE,
    IN p_fecha_fin DATE
)
BEGIN
    SELECT P.COD_PAQUETE, P.FECHA_ENVIO, C.COD_CLIENTE, C.NOMBRE AS NOMBRE_CLIENTE, C.APELLIDO AS APELLIDO_CLIENTE, E.COD_EMPLEADO, E.NOMBRE AS NOMBRE_EMPLEADO, E.APELLIDO AS APELLIDO_EMPLEADO, PR.NOMBRE AS PRODUCTO, PR.DESCRIPCION, PR.PESO, PR.PRECIO 
    FROM PAQUETE P 
    JOIN CLIENTE C ON P.COD_CLIENTE = C.COD_CLIENTE 
    JOIN EMPLEADO E ON P.COD_EMPLEADO = E.COD_EMPLEADO 
    JOIN PRODUCTO PR ON P.COD_PAQUETE = PR.COD_PAQUETE 
    WHERE P.FECHA_ENVIO BETWEEN p_fecha_inicio AND p_fecha_fin;
END //
DELIMITER ;

CALL sp_obtener_envios_por_fecha('2024-01-01', '2024-03-31');



-- Trigger para registrar cambios en el estado de los paquetes
DELIMITER //

CREATE TRIGGER tr_estado_paquete AFTER UPDATE ON PAQUETE
FOR EACH ROW
BEGIN
    INSERT INTO LOG_CAMBIOS_PAQUETE (COD_PAQUETE, FECHA_CAMBIO, ESTADO_ANTERIOR, ESTADO_ACTUAL)
    VALUES (NEW.COD_PAQUETE, NOW(), OLD.ESTADO, NEW.ESTADO);
END //

DELIMITER ;

-- Actualizar el estado de un paquete
UPDATE PAQUETE SET ESTADO = TRUE WHERE COD_PAQUETE = 1;

-- Verificar el registro del cambio en la tabla LOG_CAMBIOS_PAQUETE
SELECT * FROM LOG_CAMBIOS_PAQUETE;






